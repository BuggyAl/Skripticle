# Notice: This code REQUIRES SkBee's 1.9.0 particle functionality to work. You can download it here: https://github.com/ShaneBeee/SkBee/releases

# skBeeParticle(particle)
# Converts a Skript particle to a SkBee particle.
# particle: The particle to convert. (Skript particle)
function skBeeParticle(particle: particle effect) :: particle:
	return ({_particle} parsed as particle)

# drawLine(pos1, pos2, particle, particleDistance)
# Draws a line between two locations using particles.
# pos1: The first location. (location)
# pos2: The second location. (location)
# particle: The particle to use. (SkBee particle) You can view a list of particles here: https://skripthub.net/docs/?id=4542
# particleDistance: The target distance between each particle. Will be adjusted to fit distance between locations. (Default: 0.5)
function drawLine(pos1: location, pos2: location, particle: particle, particleDistance: number = 0.5):
	if {_particleDistance} <= 0:
		set {_particleDistance} to 0.5
	set {_distance} to distance between {_pos1} and {_pos2}
	set {_particleNum} to round({_distance} / {_particleDistance})
	set {_particleDistance} to {_distance} / {_particleNum}
	set {_vector} to vector between {_pos1} and {_pos2}
	set vector length of {_vector} to {_particleDistance}
	set {_loc} to {_pos1}
	loop {_particleNum} + 1 times:
		draw 1 {_particle} at {_loc} with extra 0 with force
		set {_loc} to {_loc} ~ {_vector}

# drawShape(points, particle, particleDistance)
# Draws a shape using a list of points and a particle.
# points: A list of locations. (Must be inputted as a Skript list!)
# particle: The particle to use. You can view a list of particles here: https://skripthub.net/docs/?id=4542
# particleDistance: The distance between each particle. (Default: 0.5)
function drawShape(points: locations, particle: particle, particleDistance: number = 0.5):
	if {_particleDistance} <= 0:
		set {_particleDistance} to 1
	loop (size of {_points::*} times):
		if {_points::%(loop-value + 1)%} exists:
			drawLine({_points::%loop-value%}, {_points::%(loop-value + 1)%}, {_particle}, {_particleDistance})
		else:
			drawLine({_points::%loop-value%}, {_points::1}, {_particle}, {_particleDistance})